import React, { ChangeEvent, Component } from "react";
import InputField from "../../components/InputField/InputField.component";
import MainTitle from "../../components/MainTitle/MainTitle.component";
import { Company } from '../../services/company/Company';
import { CompanyService } from '../../services/company/CompanyService';
import { Router } from "../app/Router";
import './Company.scss';

interface CompanyFeatureProps<T> {
    exitPath: string
    pageTitle: {
        view: string,
        edit: string,
        create: string
    }
    model: T
    navigation: Router
    mode: 'create' | 'edit' | 'view'
    fields: CompanyField[]
}

interface CompanyFeatureState<T> {
    model: T
    errors?: { [key: string]: any }
}


interface CompanyField {
    type: 'text' | 'email' | 'password'
    id: string
    label: string
    placeholder: string
}


export class CompanyFeature extends Component<CompanyFeatureProps<Company>, CompanyFeatureState<Company>> {

    service: CompanyService

    fields: CompanyField[]

    constructor(props: CompanyFeatureProps<Company>, state: CompanyFeatureState<Company>) {
        super(props, state)
        this.service = new CompanyService()
        this.fields = props.fields
    }

    componentWillMount() {
        this.setState({
            model: this.props.model
        })
    }

    fieldValueChanged(event: ChangeEvent<HTMLInputElement>) {

        const { value } = event.target
        const id = event.target.id
        this.setState((state) => {
            state.model[id] = value
            return state
        })

    }

    async formSubmitted(event: any) {

        switch (this.props.mode) {
            case 'create':

                const created = await this.service.create({
                    name: this.state.model.name,
                    address: this.state.model.address,
                    phone: this.state.model.phone
                })

                if (created.status) {
                    this.props.navigation.navigate(this.props.exitPath , {})
                } else {
                    this.setState({
                        errors: created.errors!.errors
                    })
                }
                break;

            case 'edit':
                const save = await this.service.update(this.state.model.id, {
                    name: this.state.model.name,
                    address: this.state.model.address,
                    phone: this.state.model.phone,
                })
                if (save.status) {
                    this.props.navigation.navigate(this.props.exitPath , {})
                } else {
                    this.setState({
                        errors: save.errors!.errors
                    })
                }
                break;
        }



    }

    async deletemodel(event: any) {
       
        const save = await this.service.delete(this.state.model.id)

        if (save.status) {
            this.props.navigation.navigate(this.props.exitPath , {})
        } else {
            this.setState({
                errors: save.errors!.errors
            })
        }

    }

    render() {

        let title = ''

        switch(this.props.mode) {
            case 'create':
            title = this.props.pageTitle.create
            break
            case 'edit':
            title = `${this.props.pageTitle.edit}: ${this.state.model.name}`
            break
            case 'view':
            title = `${this.props.pageTitle.view}: ${this.state.model.name}`
            break
        }

        let _fields = this.fields.map( (i,index) => {
            return (
                <InputField
                key={index}
                type={i.type}
                label={i.label}
                id={i.id}
                name={i.id}
                placeholder={i.placeholder}
                onChange={this.fieldValueChanged.bind(this)}
                defaultValue={this.state.model[i.id]}
                errors={this.state.errors}
                readOnly={this.props.mode === 'view'}
            ></InputField>
            )
        })

        return (
            <div className="FormFeature">

                <MainTitle title={title}></MainTitle>

                <form>

                    {_fields}

                    <div className="buttonHolder">
                        <button hidden={false} onClick={ (e) => this.props.navigation.navigate(this.props.exitPath , {}) } type="button" className="btn btn-secondary">Cancel</button>
                        <button hidden={this.props.mode === 'view'} onClick={this.formSubmitted.bind(this)} type="button" className="btn btn-primary">Save</button>
                        <button hidden={this.props.mode !== 'edit'} onClick={this.deletemodel.bind(this)} type="button" className="btn btn-danger">Delete</button>
                    </div>
               
                </form>
            </div>

        )
    }

}

